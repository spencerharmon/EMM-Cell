= quark QOuterMembrane isa QMembrane

== Data Members
u typedef EMMTypes.ID ID;
u typedef EMMTypes.StoredValue StoredValue;
u XTimer(2, 3, 1) dataAge;
u virtual StoredValue & getComOut();
u virtual Bool & getBonding();


== Rule push dreg
given @ isa QOuterMembrane
given i isa QInnerMembrane
given n : !($curatom is QMembrane)
vote s isa DReg
vote d {
.   if ($curatom as Res){
.     return (Votes) 1;
.   }
.   if ($curatom as Empty){
.     return (Votes) 1;
.   }
.   return (Votes) 0;
. }

check @ {
.   if ($s.$nvotes > 0u){
.     if ($d.$nvotes > 0u){
.       DReg d;
.       ew[$d.$winsn] = d.atomof;
.       Empty e;
.       ew[$s.$winsn] = e.atomof;
.     }
.   }
.   return false;
. }

  ss        ..
  sss       ...
  ssss      ....
 i@nssd -> ......
  ssss      ....
  sss       ...
  ss        ..

== Rule push Res
given @ isa QOuterMembrane
given i isa QInnerMembrane
given n : !($curatom is QMembrane)
vote s isa Res
vote d {
.   if ($curatom as Res){
.     return (Votes) 1;
.   }
.   if ($curatom as Empty){
.     return (Votes) 1;
.   }
.   return (Votes) 0;
. }

check @ {
.   if ($s.$nvotes > 0u){
.     if ($d.$nvotes > 0u){
.       Res r;
.       ew[$d.$winsn] = r.atomof;
.       Empty e;
.       ew[$s.$winsn] = e.atomof;
.     }
.   }
.   return false;
. }

  ss        ..
  sss       ...
  ssss      ....
 i@nssd -> ......
  ssss      ....
  sss       ...
  ss        ..
 
== Rule com in
given @ isa QOuterMembrane
given i isa QInnerMembrane
vote e isa Empty
vote n isa QInnerMembrane {
.  Atom myIM = ew[$i.$winsn];
.  if ($curatom as QInnerMembrane){
.    if (myIM as QInnerMembrane) {
.       if($curatom.getID() != myIM.getID()){
.         return (Votes) 1;
.       }
.     }
.   }
.   return (Votes) 0;
. }
given m isa QOuterMembrane
check @ {
.   if($n.$nvotes > 0u){
.     Atom neighborCell = ew[$n.$winsn];
.     Atom myIM = ew[$i.$winsn];
.     if (myIM as QInnerMembrane) {
.       if (neighborCell as QInnerMembrane) {
.         if(neighborCell.getID() != myIM.getID() && $e.$nvotes > 0u){
.           Atom m = ew[$m.$winsn];
.           if (m as QOuterMembrane){
.             EComIn eci;
.             eci.value = m.getComOut();
.             ew[$e.$winsn] = eci.atomof;
.           }
.         }
.       }
.     }
.   }
.   return false;
. }

 nm@ie   -> .....

== Rule3 (propagate com out)
vote o isa QOuterMembrane {
.   Atom slf = ew[0];
.   if (slf as QOuterMembrane){
.     if($self.dataAge.time > slf.dataAge.time){
.       return (Votes) 1;
.     }else{
.       return (Votes) 0;
.     }
.   }
. }

check @ {
.   Atom & slf = ew[0];
.   if (slf as QOuterMembrane){
.     if(slf.dataAge.time == 3u && $o.$nvotes > 0u){
.       Atom neighbor = ew[$o.$winsn];
.       if (neighbor as QOuterMembrane) {
.         typedef EMMTypes.StoredValue StoredValue;
.         StoredValue & comout = slf.getComOut();
.         comout = neighbor.getComOut();
.         slf.dataAge.time = neighbor.dataAge.time;
.       }
.     }
.   }   
.   return false;
. }

 ooo    ...
 o@o -> ...
 ooo    ...


== Rule 4 (increment data age timer)
check @ {
.   Atom & slf = ew[0];
.   if (slf as QOuterMembrane){
.     slf.dataAge.count();
.   }
.   return false;
. }

 @ -> .

== Rule 5 (scan for bonding)

check @ {
.   Atom & slf = ew[0];
.   if (slf as QOuterMembrane){
.     Bool & gb = slf.getBonding();
.     gb = false;
.  
.     if ($i.$nvotes > 0u){
.       Atom im = ew[$i.$winsn];
.       if (im as QInnerMembrane){
.         if (im.getBonding()){
.           gb = true;
.         }
.       }
.     }
.   }
.   return false;
. }

  i      .
 i@i -> ...
  i      .
  

== Rules: OM management (mostly growing)
given @ isa QOuterMembrane
given i isa QInnerMembrane
given o isa QOuterMembrane

let q = o|i
given n : !($curatom is QInnerMembrane)

given e : true      // Allow dead sites
vote e { // Count empty sites and transit gene copies
.   if ($curatom as Empty){
.     return (Votes) 1;
.   }else if ($curatom as QTransitGeneCopy){
.     return (Votes) 1;
.   }else if ($curatom as Res){
.     return (Votes) 1;
.   }
.   return (Votes) 0;
. }

check e : $nvotes*3u>=$nsites*2u

vote  f isa QContent // Count up content
check f : random.oddsOf($nvotes,3)

change o {
.   ew[$cursn] = ew[$o.$picksn];
. }

change i {
.   ew[$cursn] = ew[$i.$picksn];
. }

given t isa QTransitGeneCopy
given r isa Res
given m isa Empty

let p = t|m

let E = p|r



# Growth rules
 eeEoqff     ..@....
 eeo@iff ->  ...i...     # Run out
 eeoiiff     .......

    eo        ..
    Eoif      @...
    E@if  ->  @i..       # Break out
    Eoif      @...
    eo        ..


      ff       ..
    qiif     ....
    o@if  -> .i..        # Punch out
    qiif     ....
      ff       ..

let s = o|E

    soqf          @...
    o@if    ->    .i..   # Cave out
    qiif          ....
    ffff          ....



# Self-stabilization rules

  iE       .@
  i@   ->  ..    # Square off (complete outer membrane)

  nnn      ...
  n@n  ->  ._.   # Die off (eliminate isolated outer membrane)
  nnn      ...

  iii      ...
  i@i  ->  .i.   # Turn in (eliminate surrounded outer membrane)
  iii      ...
# OuterMembrane topology changing rules

   EEEEE          .....
  iiiiiii        .......
 oooo@oooo  ->  ....i....  # Fusion
  iiiiiii        .......
   EEEEE          .....
