= quark QInnerMembrane isa QMembrane
\symmetries all

== Data Members
u XTimer(4,14,1) watchdog;
u typedef EMMTypes.ID ID;
u virtual ID & getID();
u virtual Bool & getSetByIdentifier();
u virtual Bool & getBonding();
u virtual Bool & getSuppressLaying();

== Rule1 (increment watchdog timer )
check @ {
.   QInnerMembrane & slf = (QInnerMembrane&) ew[0];
.   slf.watchdog.count();
.   // return false allows evaluateRuleSets to continue to process further rules
.   // 
.   return false;
. }

 @ -> .

== Rule2 (propagate reset)
vote i isa QInnerMembrane{
.   if($self.watchdog.time == 0u){
.     return (Votes) 1;
.   }else{
.     return (Votes) 0;
.   }
. }
check @ {
.   if($i.$nvotes > 0u){
.     Atom & slf = ew[0];
.     Atom neighbor = ew[$i.$winsn];
.     if (slf as QInnerMembrane) {
.       if (neighbor as QInnerMembrane) {
.         if(slf.watchdog.time > 2){
.           slf.watchdog.time = 0;
.         }
.       }
.     }
.   }
.   return false;
. }

 iii    iii
 i@i -> i.i
 iii    iii

== Rule3 (watchdog fault detection)
vote e isa Empty
change D isa EDeath
check @ {
.   Atom slf = ew[0];
.   if (slf as QInnerMembrane){
.     if (slf.watchdog.alarm()){
.       du.print("QInnerMembrane triggered. Changing to EDeath");
.       return true;
.     }
.   }
.   return false;
. } 

 @ -> D

== Rule 3 (scan for bonding)
vote b isa EBonding
check @ {
.   QInnerMembrane& slf = (QInnerMembrane&) ew[0];
.   Bool & gb = slf.getBonding();
.
.   if ( $b.$nvotes > 0u ){
.     Atom a = ew[$b.$winsn];
.     if( a as EBonding) {
.       gb = true;
.     }
.   }
.   return false;
. }

    b          .
   bbb        ...
  bbbbb      .....
 bbi@ibb -> ...@...
  bbbbb      .....
   bbb        ...
    b          .

== Rule Suppress Laying

vote g isa Egg

vote E isa Empty

vote c isa CellContent

let f = E|c

check @ {
.   if ($E.$nvotes > 0u && $g.$nvotes > 0u) {
.     DebugUtils du;
.     du.print("Suppress laying egg");
.     ESuppressLaying e;
.     ew[$E.$winsn] = e.atomof;
.     return true;
.   }
.   return false;
. }


     g              .
    ggff           ....
   gggffE         ......
  gggg@_E   ->   ....@..
   gggffE         ......
    ggff           ....
     g              .  
 

== Rule suppress laying when OMPB
vote E isa Empty

vote o isa OuterMembraneParentBond

check @ {
.   if ($E.$nvotes > 0u && $o.$nvotes > 0u) {
.     DebugUtils du;
.     du.print("Suppress laying OMPB");
.     ESuppressLaying e;
.     ew[$E.$winsn] = e.atomof;
.     return true;
.   }
.   return false;
. }

  o  E     .  .
  o@_E ->  .@..
  o  E     .  .

== Rule 4 (Catch Egg Membrane Error)

given E isa Egg
given S isa QOuterMembrane

change @ {
.   DebugUtils du;
.   du.print("Error. Inner membrane next to egg.");
. }

   SES    ...
   S@S -> ...


== Rule propagate ID
given o isa QOuterMembrane
vote i {
.   Atom i = ew[$cursn];
.   if(i as QInnerMembrane){
.     if(i.getSetByIdentifier() == true){
.       return (Votes) 1;
.     }else{
.       return (Votes) 0;
.     }
.   }
. }

check @ {
.   typedef EMMTypes.ID ID;
.   Atom & slf = ew[0];
.   if (slf as QInnerMembrane){
#.     Bool & gsbi = slf.getSetByIdentifier();
#.     if($o.$nvotes > 0u && !gsbi){
.     if($o.$nvotes > 0u){
.       Atom neighbor = ew[$o.$winsn];
.       if (neighbor as QInnerMembrane) {
.          ID & gid = slf.getID();
.          gid = neighbor.getID();
#.          gsbi = true;
.       }
.     }
.   }
.   return false;
. }

 io    ..
 @o -> ..



== Rules: IM management (tail shrinking)
given i isa QInnerMembrane
given o isa QOuterMembrane

given @ isa QInnerMembrane
check @ : ($o.$nsites >= 7u) && ($i.$nsites <= 1u)

let x = i|o

  xxx      ...
  x@x  ->  .o.      # Shrink tail
  xxx      ...

== Rules: IM management (shrink and die)
given @ isa QInnerMembrane
given i isa QInnerMembrane
given o isa QOuterMembrane
given q isa QMembrane
given n : !($curatom is QOuterMembrane)

vote  e isa QContent
check e : $nvotes == 0u // Say no QContent

given f : true   // Allow dead sites
vote  f : !($curatom is Empty) 
check f : random.oddsOf(3u*$nvotes+1u,10u)

change o {
.   ew[$cursn] = ew[$o.$picksn];
. }

change i {
.   ew[$cursn] = ew[$i.$picksn];
. }

given E isa Empty
# Self-stabilization rules

  oE       .@
  o@   ->  ..       # Square in

  nnn      ...
  n@n  ->  ._.      # Die in
  nnn      ...

 _____     .....
 _Eoo_     .o...
  o@o  ->   ...     # Put your cap on

  ooo      ...
  o@o  ->  .o.      # Turn out
  ooo      ...


#  @o -> io          # fix corner errors
#  Ei    ii
#
#  @_i -> .i.        # straight line errors..hm.
#  ooo    ...

given z : !ew.isLive($cursn)

  o      .
  @  ->  o        # Scrub universe walls
  z      .



# Shrink rules
 ee_iqff     ..@....
 eei@off ->  ...o...     # Run in
 eeiooff     .......

   ei        ..
   Eiof      i...
   E@of  ->  @o..        # Break in
   Eiof      i...
   ei        ..

      ff       ..
    qoof     ....
    i@of  -> .o..        # Punch in
    qoof     ....
      ff       ..

vote r : $curatom is Empty 
.     || $curatom is QInnerMembrane

   riqf          @...
   i@of    ->    .o..     # Cave in
   qoof          ....
   ffff          ....

# InnerMembrane topology changing rules

    _____          .....
   ooooooo        .......
  iiii@iiii  ->  ....o....  # Fission
   ooooooo        .......
    _____          .....

