8/22/2019
 - I thought it was clever to use a transient rather than pass an Atom& around, but since a transient full of 13 atoms can't be a data member (obviously), I'm going to have to plumb this transient down to every special behavior function in order to use it. Oh well, at least at the end of it, I can carry around an unlimited amount of state without further toil and bake in accessor and priority logic. Right?
  - Looks like the 13 atom data size isn't a problem (at least it compiles like this). I need to plumb it down with the right pointer symbols to EGrow where it's writing to ew[0] and stop this nonsense.
  - The Naming of Things: Caught myself trying to do some ruler-of-the-event stuff by keeping track of the state of all of the sites. It was about to break ew[n] access altogether. So, instead of FinalEWState, we have the humble TransitionSelf. Once we state for our intent that keeping track of who ew[0] is supposed to be at the end of the event, we have one thing to do well. It feels silly now to have not gone ahead with Dave's advice to pass around an Atom&, but maybe I figured out I can take care of ew.swap(0,n) at the end of the event along with plain old ew[0] updates. I could get transition + move for free, which is neat and maybe I won't have to worry about stale atom refs with tf.swap(). I also want a priority system, but that'll have to come later.
  - It's a crucial point that TransitionSelf doesn't change ew[0] unless it's been requested. Bad things happen otherwise.
  - I need to make a color scheme for these atoms. What to do?
    - Root: Brown
    - OperatorGene: pink
    - ComIn: light Purple
    - VarRef: light Blue
    - Value: Blue
    - EGrow: light green
    - ERequest: gray
    - EResponse: Black
    - ERootInformation: Light brown
    - ETreeGeneInfo: orange
    - Identifier: red
  - all the colors worked except for egrow. fine for now
  - I think I should get this slow fork bomb under control next. EGrow is making operators before it gets good info for child geneIDs from ETreeGeneInfo. I think EGrow can be way less aggressive and just wait until conditions are perfect (i.e. plenty of info to proceed).

8/24/2019
 - What's working: enzyme density is reasonable for now (though with more enzyme types and fewer matches, this could be a problem down the road). Gene growth is successful, and the respose system seems to work ok in smaller cells. problems occur when a gene is too far away for an ERequest to make it to the target gene in time, eventually leading to duplicates.
 - What's not working: Things are still looking grim in terms of uncontrolled cell growth, but at least grows are kept in check and insane numbers of non-root tree genes aren't getting created. The next big thing is going to be keeping the enzyme numbers down. Density looks good, but they expand the cell more than needed by the genes.
 - Idea: enzymes die when they're next to an InnerMembrane. The genes themselves act as a sort of scaffold that the enzymes move around in.
 -Failed. young cells can't keep ERequest alive long enough to start growing.
 - next idea: enzymes die when they can't see genes.
 - Promising. It still took a while for an ERequest to survive long enough to grow, but the resulting cell was of reasonable size for the data contained, the genes themselves were stable and persistent, and growth stopped when all of the requested genes already existed. Logs say the first EGrow was created at 10139AEPS. I'm not sure if it waited until it smashed into the edge of the universe to strat growing. it should work without finding an edge..
 - note: there is definitely some anisotropy going on here. I hope it's just the chewing gum and sticks I put in place instead of a movement system based on genetics.
 -I know I need to add the OperatorUtils.doOperate() method to the special behavior in OperatorGene soon, which should trigger growth beyond the second layer of the equation tree, but I have to get ERequest to get proper tree0/tree1 for EGrow before this. I'm hoping to avoid multiple references to the same gene right now (except VarRef), which means ETreeGeneInfo needs to be pretty fast and accurate.
 - next step: debug the ETreeGeneInfo. make sure that one is getting created for all of the trees.
   then, debug the newgene/secondnewgene methods in EGrow
 - ETreeGeneInfo exists for the target tree and is accurate. Debug egrow.
 - Got expected results from egrow.
 - ETreeGeneInfo needs to log ERequests as genes.
 - after that, I think we need to build in a churning/clustering behavior other than this non-funtional anisotropic diffusion that's happening now.

8/25/2019
 - Actually any QGrow could be a gene. ETreeGeneInfo can log them all. What if you log an EGrow that eventually fails? I think something needs to come along and kill all of the info atoms occasionally to get a new read. Info atoms never have enough information to transition a geneid or treeid from true to false, so starting over is the next best thing.
 - problem: selecting genes sequentially leads to a race condition, with EGrow trying to get the next available genes even if another operator is already referencing them. This should be helped in part by considering all QGrow atoms as a found GeneID.
 - possible solution: don't select a GeneID sequentially. Pick one at random, if it's available, that's the gene, otherwise fail. Pretty sure this sould make it progressively harder to get a gene. Maybe a combination of these strategies. Randomly select a geneID and if it's taken, step through the rest of the list to find one that's available. Best of both worlds? we'll see. 
 - thought: init can create a ERootInformation so gene information is ready for the first EGrow. 
 - Enzyme/gene interactions are looking pretty good, but things could be moving faster. I want to try shortening the Enzyme lifespan again. Should speed up end-of-life enzyme processeses like ERequest -> EGrow and help clear out unneccessary Enzymes more quickly.
 - That was a spectacular difference. I think the faster enzymes are much preferred. Grows are created a little quickly right now, but a slight clustering bias should help the ERequests find their target. If it's still too much, we can twiddle with the odds of ERequest transitioning to EGrow.

9/7/2019
 - I've been thinking of the concept of clustering inside a membrane in the mfm afk for the past couple of weeks. There are a couple of things we know:
    1. genes, enzymes, and other cell content need to move around to propagate information within the cell.
    2. the larger and more spread-out a cell is, the less likely it is that a cell content will come in contact with is counterparts to complete its process.
    3. This has disasterous effects on the longevity of genes since an operator (Root or OperatorGene) can initiate a grow process for a gene that is simply too far away for a eresponse to make it back to the requestor.
    4. a sufficiently spread-out cell can fissure, causing non-viable tree fragments.
    5. clustering things together means eliminating empty sites between them
 - I've thought of some potentially elaborate ways to sole this, from radius 4 cluster atoms that bring together genes or cell contents, to atoms that move in some spiral pattern to attempt to find or establish a center, dragging other cell components with it, but all of this seems like a lot of engineering for potentially little reward. As I sit here, I'm rethiking how cell-content movement logic should work. The current cell contents behavior to solve point 1 above is to randomly diffuse (though I think anisotropies do exist here, that's beside the point for now) by swapping with an empty atom one site away in a randomly chosen direction. This necessarilly introduces empty space between atoms we want to keep together. So, let's make some new rules about how cellcontent moves within a cell:
   Churning:
     - If the entire event window is cell content or empty, swap with any cell content.
   Directional Movement:
     - If an ESymmetry is found, and the site immediately in front (ew[1] for the indicated symmetry) is empty, swap with it.
   Remove bubbles:
     - If no ESymmetry is found, swap with a random empty site in the event window unless we see an innermembrane. (fill in gaps)
   Surface behavior:
     - If an InnerMembrane is found, only curning and directional movement may be performed.

9/8/2019
  - Without having written any code for it yet, I'm most concerned with the "remove bubbles" process, since it relies on the idea that the bias induced by seeing an inner membrane (being on the surface) is sufficient to eventually move all of the empty atoms to the surface and bring cell contents together.
  - I haven't written an ESymmetry or a symmetry root yet in this iteration, but these dynamics need to be accounted for to consider anything a wholistic solution to inner-cell clustering. I've taken to the idea of bubbles in a similar sense to the classic physics analogy between electron holes and their role in circuits and bubbles moving through liquids in a tube. In a similar fashion, Empty atoms will appear to move in the opposite directon of that indicated by ESymmetry through the cell contents cluster.
  - By comparison, when there aren't any ESymmetry enzymes in the cell, bubbles will appear to move by random diffusion with a radius of 2 until they reach the surface, where they'll be left alone by surface cell contents. (Until an ESymmetry is created.)
  - Since cell contents that are over 2 sites away from the membrane won't have any indication of this fact, random bubbles can be introduced at this layer, which may form a kind of foam or vapor pressure at the surface, which should help for reactions that require empty sites.
  - As long as we keep the behavior where enzymes die when adjacent to the membrane, the denisty of this foam or vapor pressure on the surface may be related to the ratio of enzymes to genes in the cell.
  - Enough speculating. Time to write some code. I considered that this logic might be well-suited to SPLAT, but I think I'm more comfortable leveraging a WindowScanner in Ulam for now.
  - Overall, this is an improvement, but probably not a final destination. The cells have less tendency to flatten on tile and universe boundaries. They don't seem to get significantly less dense over time, but there's still a larger than anticipated number of empty sites in the middle of the cell. Since this can help some reactions, we won't consider this a problem until it is one. Churning appears to be working as expected. CellContents really get around. It looks like enzymes aren't dying aggressively enough when they're alone, leading to EGrow finding pockes away from genes.
  - QEnzyme got a new method that causes it to aggressively die when in adjacent to a membrane. (I was wrong before when I assumed this was already happening. They only died when they were out of range of a QGene. Now they do both.) Seems to be an improvement. We'll keep it like that for now.
  - I've created a membrane breach. I tested ESymmetry before I turned it into a parameter. Now, all values for Esymmetry.symmetry cause a breach of the membrane eventually. I'm operating on the theory that the actual symmetry-changing logic in CellContent.swapWithSite is what's doing it for now.
  - I think I was fundamentally wrong about how parameters are supposed to work. ESymmetry causes no problems until the parameter value is changed. I haven't tracked this down to a single event yet, but I think I'll build a tool that will convert itself to an ESymmetry based on a separate parameterized value.
  - The SymmetryTool has shown definitetively that the breach occurs when the value of ESymmetry.symmetry is non-zero.  - new theory: Changing symmetry after scanning with WindowScanner and before swapping is an error. Scanned sitenums are pre-symmetry change values. Need to translation semantic in CellContent.swapWithSite.
  - Yep, I think it was that. Unable to replicate breach issue after ensuring ws.scan occurs with zero-symmetry. in CellContent
  - Going to reenable directional movement in cell content.
  - Reenabled. Definitely got different directions from 4 test cells using SymmetryTool with values 0, 2, 4, and 6 respectively, but didn't see an obvious west, north, east, south orientation like I expected. Oh well. We'll puth that off until after roots are producing ESymmetry.
  - Let's make bigger trees by making the OperatorGenes work.
  - Wow. That's bigger alright. Treegene info isn't bounding the number of operators and terminators. growth is uncontrolled. Anisotropy very apparent when 1 cell is allowed to grow to several tiles in size on {{8H8}} grid. Some enzymes aren't affected by theMembraneIsLava.
  - significant tail reduction by ensuring death for all enzymes touching the membrane. So much that I want this to work up to max radius for enzymes.
  - That doesn't work. ERequest can't survive long enough to turn into EGrow in a recently initialized cell.
  - I wonder if some sort of ramp-down strategy is best, where there's a near guarantee of building an initial tree, and reduced effectiveness later in the cell's life.
  - Enter: EInit; an enzyme that means we're initializing. For other enzumes, this means they do NOT die when they see a QMembrane in their ew.
  - EInit never ages out; enzyme process is broken.
  - enzymes only create copies that are older than themselves. enzymes age out properly now.
  - EInit doesn't last long enough. Increase age again.
  - EInit now lasts 2^5 times longer than a typical enzyme.
  - I think grow odds ought to also me modulated by EInit.
  - Actually, there is no concept of growodds. only request odds. Request odds during init: 1 in 1; otherwise: 1 in 100.

9/9/2019
 - Allowing an EInit to 'respawn' at the end of its life cycle with enough odds to happen at all in the earliest stage of the simulation causes them to fail to die out. The solution, as usual, is another element. In this case, Init takes on the job by producing EInit for a period of time before dying. This way, QEnzyme behavior works for its intended purpose: short-lived intra-cellular communication and state. It's making me wonder if other stage-of-life Enzymes should exist. In that respect, IIRC, the first enzyme was EDeath, wich is a stage of life of sorts, but what would be between EInit and EDeath? Maybe nothing, but we'll see. Should there be something like Init that triggers EDeath? Probably not. Having one atom responsible for something like that seems un-robust. [sic]

 - I'm currently of the mind that, even though achieving viability in a small percentage of initializing cells could be enough to prove that this EMM implentation is comparible in character to other implementations on finite architectures, it's still worth investing the time in making this a reliable process to speed up, and therefore uncomplicate, the process of observing cell behavior. However, there should be a limit to the amount of "help" that should be given to a cell to survive its environment. Instead, the focus should be on providing the capability for the cell to evolve strategies of survival. If larger numbers of genes yield unwieldy, fragile cells, so be it. Given this case, natural selection ought to select for smaller numbers of genes. Still, I should leave open the possiblity for more genes in a single cell than I think is structually viable for this system in the event that natural selection proves otherwise.

 -enough blathering on

 - On an {{8H8}} wall, I placed 9 seeds which all generated within 50% of the same proportion of operators and terminators after 6k AEPS. Good. However, there are multiple notable problems:
    1. Most cells have a shape that, if blacked out completely within the bounds of their outer membrane, would look like a roasted turkey leg, with defined lobes to the east on the bone end, narrowing, before getting wide and round on the meaty end to the west. Maybe some of them are more like fish in a similar way. The anisotropy needs to be fixed.
    2. In one instance, in the stretched-out bone part, there's a lone ERequest surrounded by membrane. This shouldn't be possible for any enzyme not in the presence of an EInit. Needs fixed.
    3. The morphing of the membrane during the westward march of each cell illustrates an important point regarding movement. Since cells will need to move, this problem is best resolved.

 - for 1: I noticed that there's some kind of gene-clustering method that I wrote in an effort to solve what's now being done in cellcontent. It's a biased selection that moves genes around. Definitely get rid of that. Then, if that doens't fix it, look for other cases of for(SiteNum ...
 - for 2: look more closely at the interaction between TransistionSelf and QEnzyme.theMembraneIsLava; something is executing ts.changeSelf before ts.die. maybe ts.die() should have some kind of priority.
 - for 3: try reducing enzyme lifespan again. 3-bit XTimer reduced this "tail" effect previously.

9/11/2019
 -1: disabled cluser() method in QGene
 -2: added priority for die() in TransitionSelf
 -3: lifespan reduced.
 -Round. Tidy. Stationary. Too large: ~2 tiles at 5k AEPS.
 - Too many EInit too freqently. I think I want them to taper off, but overall I think I got what I asked for. They're very dense when stationary. I think I like the movement established in CellContent.
 - After tapering off the frequency of EInit production by Init over its lifetime, all EInit have died off at 1.8k AEPS, only getting sporadically created. Some EGrow remain. Cell sizes range from 0.2 tiles to .5 tiles. By 4.8k AEPS, it's obvious that unbounded growth is occurring in all but two of the 11 cells in this simulation. It's clear that 1 in 100 events for a gene to create an ERequest (potentially leading to mutation) is way way too often. I will dial that back, but something tells me that this is not all that will be needed.
 - Looking at the two smallest genes, neither has an OperatorGene and they have 2 or 3 non-root genes, respectively.
 - It wasn't 1 in 100 events before, it was 1 in 10. At 1 in 1000, cells are very small and non-viable. But it's good we have a knob that can get from too small to too big. Before we go with a ramped half-and-half approach to finding the right balance, I think I want to change the enzyme death radius back to 1 since having it smaller only really serves to prevent small cells from growing.
 - This has had a deceptively satisfying effect. The result is a variety of sizes of cells, all of reasonable size (20-50 sites across). However, the gene count is steadily growing over time, from 60 OperatorGenes in 9 cells at 5k AEPS to ~110 in the same cells at 11k AEPS. I wonder if this trend is linear or exponential..doesn't matter, this has to be addressed. If too many ERequests are resulting in genes and causing excessive mutation, it's because EResponse isn't propagating fast enough.

  -Plan of attack for more effective EResponse:
    1. Try increasing general enzyme density
    2. ensure everything aggressively converts to EResponse. EResponses change ERequest and EGrow into themselves AND EGrow and ERequest change into EResponse. All elements involved in the process have to contribute to this.
 
  - Did 2; all QGrow were already searching for EResponse or their target gene, but EResponse wasn't overwriting the other QGrow with itself. Adding this made it evident that EResponse is able to propagate very rapidly. I'm encouraged that this bias might be emphasized with higher enzyme density.

  -Whew. Trying to change enzyme density opened a whole can of bugs. Namely that the interaction between transitionself, incumbent(), and specialDeathBehavior() (transition ERequest to EGrow) and needing to change the state of self (i.g. self.age.time) leads to unexpected behavior. Winning atom must be chosen after count, but before alarm.

  - I wanted more enzymes and I got more enzymes. Way too many, I think. The other way was way simpler, so I need a different way to stop the EGrow from taking over. That's it for tonight.

9/14/2019
  - I switched QEnzyme back to trying to keep only one other (and not always two other) matching enzymes in their event window. I ran 9 seeds of that for about 120k AEPS and some interesting things happened. I had a power failure since then, so I'm going from memory:
     - Over that time, all cells moved about .5 tiles north.
     - 2 cells split when they spanned two three-way tile intersections.
     - global count of operator genes climbed to about 400 by 50k AEPS, and stayed there unil I stopped it at 120k. 
     - The most important thing is that enzymes of all kinds are still being randomly destroyed at a high rate.
  - Every second (33AER), I see all gene types getting rapidly created and destroyed. I expect this is the intended behavior of a gene destroying its imposters or clones, with these unintended atoms getting created frequently. This means the mutation rate is much too high even long after the EInit are gone for good. ERequest is the start of this and I've been influcing the mutation rate be controlling the odds that a gene will create an ERequest. I'm thinking that for this process to work as expected, I'll need to somehow inform a gene that it's been 'too long' since one of its children has been seen, and with increasing odds, an ERequest is eventually made, hopefully overwhelmingly because the child gene actually doesn't exist. Unfortunately, I've already used all of the state bits in the genes. Actually, there tend to be a lot of treeGeneInfo (and if there aren't, it's because an EGrow hasn't been created in a while), and that is supposed to be reliable information about what genes do and don't exist. Maybe this is an inflection point for gene behavior around creating requests.
  - I'm starting operation TreeGeneInfo. OperatorUtils has the request logic in doOperate. I think this needs to be separated entirely. childSearch is a method in OperatorUtils that looks for evidence of a child gene: either TreeGeneInfo, EResponse, or the gene itself.
  -VarRef doesn't use operator utils. Tree-generating mutations and growth will use different methods.
  -I can strengthen the accuracy of ETreeGeneInfo by making NonRootTrees mark themselves when they see one.
  - This is making genes way more stable but not inhibiting initialization. Very good. However, I think 1/1M squared may be a little too much (treeGeneInfo step needs separate odds).
  - big problem: only treeID 0 genes are being made. (but the trees make sense, so that's good!) 
  - It takes too long for EInits to stop to tell whether normal mutation is working. I'll dial that back significantly.
  - reduce treegeneinfo odds. 1 in 100.
  - reduce einit production to 1000 steps if init counter.
  - the changes to QEnzyme.versionOrDensityChanges() broke isSolitary behavior needed by EGrow.

9/15/2019
  - Looks like unbounded growth again. Probably the mutationOdds.
  - I'm dreaming of data visualization. Parsing mfs data to draw a graph of each cell's equation tree and lone genes/fragments. It would be great. Then we could see even minor improvements. Dave had good words for this: Time spent improving data visualization...[something something] tenfold. Wish I could remember.
  - Right now, it seems like nothing I do affects this 'genes are mostly tree 0' problem. The fastest way to visualize is DebugUtils, so I'll start there.
  - Looking at genes. I don't see them creating EResponses themselves. This would make EResponse more effective.
  - making the roots 1, 2, 3, and 4 clears up the bias for 0. I'm sure it still exists, but we can move on for now.
  - mutations are too frequent; EInit production doesn't last long enough. Race to create structure then mostly stop.

9/17/2019
  - I ran the current iteration to about 2.5M AEPS; all 9 cells got stuck at three-way tile intersections (there is nothing that should make them move, but there's a slow march north still). At ~5k AEPS, there were no remaining Init, and there were ~19 OperatorGenes, and ~60 each of ComIn and Value. At 2.5M AEPS, there are 32 OperatorGenes, 104 ComIn, and 113 Value. A bit of linear growth, but seemingly stable overall.

 - Considering this, I'll shift focus for now to movement and direction root atoms and the movement enzymes.
 - The features we need are:
   - direction inherited from gene process.
   - movement (boolean. i.e. whether to move right now) inherited from gene process.
   - quick change from non-moving to moving state and back.

 - The basic idea is this:
   - Two root genes are involved in the process: Movement, and Direction.
   - Movement produces EMove or EAntiMove, with equal probability (evens/odds; high/low), based on current value.
   - Direction produces EPreSymmetry, with equal odds for each symmetry value based on the current StoredValue.
   - ESymmetry influences the movement behavior of all CellContent.
   - EPreSymmetry is a solitary enzyme. It converts itself to ESymmetry in the presence of EMove.
   - ESymmetry replaces EMove with copies of itself. EMove replaces itself with ESymmetry.
   - EAntiMove replaces EMove and ESymmetry with copies of itself and vice versa.
   - Default direction is west and default movement is false.

 - Things look good so far. We may want to disable enzyme-creating root behavior during initialization because all of the enzymes look a little chaotic, but things worked out this go-round. No EMoves yet, but I'm going to leave it running overnight to see what happens by morning.

9/18/2019
  - power failure overnight (I really need a ups). Started a new simulation. Hopefully, it will be running when I get home from work.
  - after work, all of the cells appear stuck on three-way tile intersections per the usual. All of the Movement and Direction atoms have value 0, though there are other roots which have non-zero value. I'll take this to mean that it's likely that, out of more than 9 cells, some are likely to 'decide' to move unless I find out otherwise.
  - After creating ValueTool and injecting values for gene 0 and 1 on Movement and Direction's trees, I can see that they are not working. Then I remembered that QRoot is calling ts.changeSelf and it's overwriting value changes. Obviously, only Root needs to change to a different type of root if it has that treeID.
  - Now the artificial tree works as expected. EMove and ESymmetry also getting created for artificial tree.
  - 64 cells on the 8H8 produced EMove by 650 AEPS. Probably going to need to disable root enzyme production during init, but yay!
  - The cell that's moving is very obvious. it may damage the cell. Is that ok... hm...?
  - It held together just fine and it's headed very west. Very satisfying result.

9/19/2019
  - 64-cell 8H8 ran overnight to 311kAEPS; about 5 or 6 cells had EMove/ESymmetry. Some cell breakage moving across the universe is apparent.
  - Left it running all day while I was at work. It's currently at 768k AEPS. Three cells are smashed up against the west boundary full of ESymmetry and one cell is out in the middle full of EMove. To its east, there's a broken chunk of a cell with a Direction and occasionally an EPreSymmetry.
  - Some cells have way too many EPreSymmetry, and it made me realize that so-called solitary enzymes, in fact, have no limit to their density. To that end, solitary enzymes need to actively kill matching enzymes.
  - Aside from this, I think the next big thing is to implement cell death. My current thought on this is to implement a watchdog in the InnerMembrane and pick an atom (probably Identifier) to tickle it. That way, all the little cell fragments should die automatically. The watchdog can randomly initiate the death routine with some tunable odds.
  - I realized that the default QEnzyme.isAMatch() method was a bug. Now it compares atom type.
  - Solitary enzymes now have a much smaller effect on overall cell size, but in test cells, I'm seeing EMove and ESymmetry getting stamped out by rogue EAntiMove. I can fix this by disallowing changes to QEMove of lower age.
  - I also made EAntiMove solitary. It propagates quickly enough. Now it dies quickly, too.
  - Yep, cool. Saved on the enzyme budget.
  - Dave Ackley helped me get a watchdog shimmed in the InnerMembrane. I still need to tickle the InnerMembrane, still thinking this will be the Identifier and make the EDeath actually work, but this looks good so far.
  - I think a 5-bit XTimer is too long for the watchdog.
  - I think instead of getting the membrane to do the random death, the Identifier can randomly replace itself with an EDeath. That way, if there's an ID present, it will eventually die, and if there's not, it will die pretty soon.

9/20/2019
  - added InnerMembrane rule to propagate the timer reset.
  - changed the InnerMembrane rules to get the EDeath to show up
  - gave EDeath some teeth
  - changed EDeath radius to 1.
  - made Init tickle the watchdog before the Identifier is created.
  - Identifier tickes watchdog (and, with slim odds, randomly initiates death itself).
  - It looks like propagation is working, but once cells get large enough, it's too likely that an InnerMembrane crosses the threshold before propagation makes it around. Longer timer, I think (and a debug to make sure propagation is working).
  - slight propagation improvement, but I still need the longer watchdog timer.
  - the tightrope walk between tickleWatchdog and EDeath is dramatic to watch. I like this.
  - I'm running the 64-cell simulation for a while to see what we end up with after a few hundred kAEPS.

9/21/2019
 - ran overnight. at 400 kAEPS. Without any automated tracking, it's hard to say if anything died, or if they did, why. It's likely that I should always print the cause and time of death. autosave catches print statement and AEPS.
 - however, the simulation looks less messy. I haven't seen any EDeath this morning, but I did see some last night when I started the simulation.
 - I already see the extreme "lone Identifier in a membrane" edge case. maybe Identifier can look for Roots? How deep can this watchdog go? I don't see fit to complicate things before I see reproduction behavior.
 - I found a guy smashed on the west side of the universe with a direction value. Direction-to-sym maths are wrong.
 - A couple of cases of extra roots (this should be impossible on account of having no VarRef), and even a case of two Direction! This is most likely caused by membranes fusing together. I've seen this before. I'm not sure if I think it's a good thing that can happen, but I don't know how to prevent it. Maybe C214's cilia can prevent this. Who knows? However, I can ensure Genes kill their copies or imposters. Smashing together would yeild a totally different cell, but at least it wouldn't be split-brained. My hope is that the danger of these idiosyncracies will cause selection pressure for cells that evolve trees that avoid this.
 - I also think cell fragments are staying around longer than necessary. heathy cells don't seem to get above WDT 10; we can probably die at 11 or 12. propagation also leaves something to be desired, but it works well enough for now.
 - I'm still considering alternatives for reproduction behavior, but I think ComOut behavior is pretty strightforward. It also involves a little modification of OuterMembrane, so I should tackle that bit now.
 - changed direction behavior. Now, the Direction changes approx. every 1/8th of the max value of the StoredValue. Distribution isn't even, but it'll be heavily weighted toward the max and min no matter what (saturating arithmetic)
 - The most nebulous thing about ComOut behavior is how it behaves at cell boundaries, OuterMembrane. No CellContents can see past the ring of OuterMembrane around the cell, and therefore can't transfer information between cells. Therefore, the membrane must be an intermediary. However, from the perspective of a single OuterMembrane, there's no way to know if another OuterMembrane in our event window is part of our cell or another cell.
 - However, if the OuterMembrane takes on the ID of Identifier, it'll be able to distinguish other cells unless there's a collision. It's a great shame to rely on this mechanism, but I believe that it's worth the cost for the ability to easily distinguish between self and other.
 - In addition to an ID, OuterMembrane has to keep the ComOut StoredValue, at current bitness, that's 64 bits. ComIn, therefore, needs to be injected into the cell by the OuterMembrane as an EComIn.
 - data members and propagation setup for outer membrane.
 - outer membrane is supposed to create EComIn, but this is very untested. I think it's possible for it to end up outside the cell, so that needs fixed.
 - ComOut makes EComOut based on eqation tree
 - EComOut writes value to OuterMembrane
 - OuterMembrane propagates value, with priority given to new data.
 - OuterMembrane can distinguish OuterMembrane of other cells (plus or minus ID collisions) and create EComIn.

9/22/2019
 - some of those e's in the OuterMembrane 'com in' rule could have been outside the cell. Maybe it works like this? No more errant EComIn after ID propagation, anyway..
 