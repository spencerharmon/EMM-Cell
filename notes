8/22/2019
 - I thought it was clever to use a transient rather than pass an Atom& around, but since a transient full of 13 atoms can't be a data member (obviously), I'm going to have to plumb this transient down to every special behavior function in order to use it. Oh well, at least at the end of it, I can carry around an unlimited amount of state without further toil and bake in accessor and priority logic. Right?
  - Looks like the 13 atom data size isn't a problem (at least it compiles like this). I need to plumb it down with the right pointer symbols to EGrow where it's writing to ew[0] and stop this nonsense.
  - The Naming of Things: Caught myself trying to do some ruler-of-the-event stuff by keeping track of the state of all of the sites. It was about to break ew[n] access altogether. So, instead of FinalEWState, we have the humble TransitionSelf. Once we state for our intent that keeping track of who ew[0] is supposed to be at the end of the event, we have one thing to do well. It feels silly now to have not gone ahead with Dave's advice to pass around an Atom&, but maybe I figured out I can take care of ew.swap(0,n) at the end of the event along with plain old ew[0] updates. I could get transition + move for free, which is neat and maybe I won't have to worry about stale atom refs with tf.swap(). I also want a priority system, but that'll have to come later.
  - It's a crucial point that TransitionSelf doesn't change ew[0] unless it's been requested. Bad things happen otherwise.
  - I need to make a color scheme for these atoms. What to do?
    - Root: Brown
    - OperatorGene: pink
    - ComIn: light Purple
    - VarRef: light Blue
    - Value: Blue
    - EGrow: light green
    - ERequest: gray
    - EResponse: Black
    - ERootInformation: Light brown
    - ETreeGeneInfo: orange
    - Identifier: red
  - all the colors worked except for egrow. fine for now
  - I think I should get this slow fork bomb under control next. EGrow is making operators before it gets good info for child geneIDs from ETreeGeneInfo. I think EGrow can be way less aggressive and just wait until conditions are perfect (i.e. plenty of info to proceed).

8/24/2019
 - What's working: enzyme density is reasonable for now (though with more enzyme types and fewer matches, this could be a problem down the road). Gene growth is successful, and the respose system seems to work ok in smaller cells. problems occur when a gene is too far away for an ERequest to make it to the target gene in time, eventually leading to duplicates.
 - What's not working: Things are still looking grim in terms of uncontrolled cell growth, but at least grows are kept in check and insane numbers of non-root tree genes aren't getting created. The next big thing is going to be keeping the enzyme numbers down. Density looks good, but they expand the cell more than needed by the genes.
 - Idea: enzymes die when they're next to an InnerMembrane. The genes themselves act as a sort of scaffold that the enzymes move around in.
 -Failed. young cells can't keep ERequest alive long enough to start growing.
 - next idea: enzymes die when they can't see genes.
 - Promising. It still took a while for an ERequest to survive long enough to grow, but the resulting cell was of reasonable size for the data contained, the genes themselves were stable and persistent, and growth stopped when all of the requested genes already existed. Logs say the first EGrow was created at 10139AEPS. I'm not sure if it waited until it smashed into the edge of the universe to strat growing. it should work without finding an edge..
 - note: there is definitely some anisotropy going on here. I hope it's just the chewing gum and sticks I put in place instead of a movement system based on genetics.
 