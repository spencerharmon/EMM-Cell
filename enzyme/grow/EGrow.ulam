/**
Initial tree generation and point mutations occur through EGrow
process.
 \color 00f
 \radius 2
 */

element EGrow : QGrow {
  typedef EMMTypes.TreeID TreeID;
  typedef EMMTypes.GeneID GeneID;

  TreeFactory tf;
  
  TreeID treeID;
  GeneID geneID;
  Bool isRoot;
  Once o;

  @Override TreeID getTargetTreeID(){
    return treeID;
  }
  @Override GeneID getTargetGeneID(){
    return geneID;
  }
  @Override Bool getTargetIsRoot(){
    return isRoot;
  }
  @Override Bool isSolitary(){
    return true;
  }
  @Override Bool isAMatch(Atom a){
    if(a as EGrow){
      if(a.treeID == treeID && a.geneID == geneID && a.isRoot == isRoot){
        return true;
      }else{
        return false;
      }
    }
    return false;
  }

  TreeID newtree(SiteNum slot){
    if(ew.isAccessible(slot) && slot != (SiteNum) 0){
      Atom & a = ew[slot];
      if(a as ERootInformation){
        for(TreeID t = 0; t < TreeID.maxof; ++t){
          if(!a.treeIDInUse[t]){
            return (TreeID) t;
          }
        }
      }
    }
    return (TreeID) 0;
  }
  
  GeneID newgene(SiteNum slot){
    if(ew.isAccessible(slot) && slot != (SiteNum) 0){
      Atom & a = ew[slot];
      if(a as ETreeGeneInfo){
        if(a.treeID == treeID){
	  //todo: index out-of-bounds if greater-than-or-equal-to. why?
          for(GeneID g = (GeneID) r.create(GeneID.maxof); g < GeneID.maxof; ++g){
            if(!a.geneIDInUse[g]){
              return g;
            }
          }
        }
      }
    }
    return (GeneID) 0;
  }
  GeneID secondnewgene(SiteNum slot){
    Bool firstFound = false;
    if(ew.isAccessible(slot) && slot != (SiteNum) 0){
      Atom & a = ew[slot];
      if(a as ETreeGeneInfo){
        if(a.treeID == treeID){
	  //todo: index out-of-bounds if greater-than-or-equal-to. why?
          for(GeneID g = (GeneID) r.create(GeneID.maxof); g < GeneID.maxof; ++g){
            if(!a.geneIDInUse[g]){
	      if(firstFound){
                return g;
              }
	      firstFound = true;
            }
          }
        }
      }
    }
    return (GeneID) 0;
  }
  SiteNum getRootInfo(){
    for(SiteNum i = 1; ew.isAccessible(i); ++i){
      Atom & a = ew[i];
      if(a as ERootInformation){
        return i;
      }
    }
    //last resort
    return (SiteNum) 0;
  }
  
  SiteNum getTreeGeneInfo(){
    for(SiteNum i = 1; ew.isAccessible(i); ++i){
      Atom & a = ew[i];
      if(a as ETreeGeneInfo){
        return i;
      }
    }
    //last resort
    return (SiteNum) 0;
  }

  @Override Void specialEnzymeBehavior(TransitionSelf & ts){
    if(o.new()){
      ERootInformation eri;
      cell.putInEmpty(eri.atomof);
    }
    if(isRoot){
      SiteNum rootInfoSlot = getRootInfo();
      if(rootInfoSlot != (SiteNum) 0){
        Atom n = tf.createRandomRoot(newtree(rootInfoSlot));
	ts.changeSelf(n);
      }
    }else{
      SiteNum rootInfoSlot = getRootInfo();
      SiteNum treeInfoSlot = getTreeGeneInfo();
      if(rootInfoSlot != (SiteNum) 0 && treeInfoSlot != (SiteNum) 0){
        GeneID optree0 = newgene(treeInfoSlot);
	GeneID optree1 = secondnewgene(treeInfoSlot);
	if(optree0 != optree1){
          Atom n = tf.grow(treeID, geneID, optree0, optree1, newtree(rootInfoSlot));
          ts.changeSelf(n);
	}
      }
    }
  }
}