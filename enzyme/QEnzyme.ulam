quark QEnzyme : CellContent {
  typedef EventWindow.SiteNum SiteNum;
  typedef WindowScanner.Category Category;
  typedef AtomUtils.Type ElementType;
  XTimer(2,3,1) age;
  CellUtils cu;
  
  virtual Void specialEnzymeBehavior(TransitionSelf & ts){
    return;
  }
  virtual Bool individualDeathBehavior(TransitionSelf & ts){
    return false;
  }
  //solitary enzymes don't increase their density.
  virtual Bool isSolitary(){
    return false;
  }
  //override for variable checking to avoid blowing away unique enzymes.
  //default is true (i.e. all members of a type are the same)
  virtual Bool isAMatch(Atom a){
    return true;
  }

  Atom incumbent(SiteNum slot){
    if(ew.isAccessible(slot)){
      Atom a = ew[slot];
      if(a as QEnzyme){
        if(a.age.time == age.time){
          return self.atomof;
        }else if(a.age.time > age.time){
          return a.atomof;
        }else if(a.age.time < age.time){
          return self.atomof;
        }
      }
    }
    return self.atomof;  
  }
  Bool versionOrDensityChanges(TransitionSelf & ts){
    //
    // use windowscanner to move a little closer to seeing only one of our type.
    // also, make sure that everyone is on the newest version (lowest age) of our type
    //
    // returns true if we've changed ew[0].
    //
    //safe to assume we're ew[0] here?
    ElementType type = au.getValidType(ew[0]);

    WindowScanner ws;
    SiteVisitorByType sv;

    Category cat = ws.allocateCategory();

    sv.setType(cat,type);
    ws.scan(sv);
    
    SiteNum winsn = ws.getSiteNum(cat);
    Atom winatm = incumbent(winsn);

    if(winatm as QEnzyme){
      //TODO: don't check isAMatch here. The sitevisitor needs to check that. We should only get back matches.
      if(isAMatch(winatm.atomof) &&
	  winsn > (SiteNum) 0){
        Empty e;
	
        //for testing, two will be the desired amount.
        if(ws.getHits(cat) == 0u){
	  //copy ourselves twice.
          cu.putInEmpty(winatm.atomof);
        }else if(ws.getHits(cat) > 1u){
          //one too many..
          ew[winsn] = e.atomof;
        }
        // make sure we have the winning version
        ts.changeSelf(winatm.atomof);
        return true;
      }
    }
    return false;
  }
  Void dieWithoutGenes(TransitionSelf & ts){
    Bool seen = false;

    for(SiteNum i = 1; ew.isAccessible(i); ++i){
      Atom a = ew[i];
      if(a as QGene){
        seen = true;
      }
    }
    if(!seen){
      ts.die();
    }
  }
  Void theMembraneIsLava(TransitionSelf & ts){
//    for(SiteNum i = 1; ew.isAccessible(i); ++i){ //whole event window
    for(SiteNum i = 1; i <= (SiteNum) 4; ++i){
      Atom a = ew[i];
      if(a as QMembrane){
        if(!cu.initializing()){
          ts.die();
	}
      }
    }
  }

  @Override Void specialBehavior(TransitionSelf & ts){
    age.count();
    if(!isSolitary()){
      versionOrDensityChanges(ts);
    }
    if(age.alarm()){
      if(!individualDeathBehavior(ts)){
        ts.die();
      }
    }
    dieWithoutGenes(ts);
    specialEnzymeBehavior(ts);
    theMembraneIsLava(ts);
  }
}