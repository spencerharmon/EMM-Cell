quark QEnzyme : CellContent {
  typedef EventWindow.SiteNum SiteNum;
  typedef WindowScanner.Category Category;
  typedef AtomUtils.Type ElementType;
  XTimer(3,7,1) age;
  
  virtual Void specialEnzymeBehavior(TransitionSelf & ts){
    return;
  }
  virtual Bool individualDeathBehavior(TransitionSelf & ts){
    return false;
  }
  //solitary enzymes don't increase their density.
  virtual Bool isSolitary(){
    return false;
  }
  //override for variable checking to avoid blowing away unique enzymes.
  //default is true (i.e. all members of a type are the same)
  virtual Bool isAMatch(Atom a){
    return true;
  }

  Atom incumbent(SiteNum slot){
    if(ew.isAccessible(slot)){
      Atom a = ew[slot];
      if(a as QEnzyme){
        if(a.age.time == age.time){
          return self.atomof;
        }else if(a.age.time > age.time){
          return a.atomof;
        }else if(a.age.time < age.time){
          return self.atomof;
        }
      }
    }
    return self.atomof;  
  }
  Bool versionOrDensityChanges(TransitionSelf & ts){
    //
    // use windowscanner to move a little closer to seeing only one of our type.
    // also, make sure that everyone is on the newest version (lowest age) of our type
    //
    // returns true if we've changed ew[0].
    //
    //safe to assume we're ew[0] here?
    ElementType type = au.getValidType(ew[0]);

    WindowScanner ws;
    SiteVisitorByType sv;

    Category cat = ws.allocateCategory();

    sv.setType(cat,type);
    ws.scan(sv);
    
    SiteNum winsn = ws.getSiteNum(cat);
    Atom winatm = incumbent(winsn);

    if(ws.getHits(cat) == 0u && !isSolitary()){
       //we're alone; copy ourselves to an empty, if possible.
       Category cEmpty = ws.allocateCategory();
       Empty e;
       ElementType tEmpty = au.getValidType(e);
       sv.setType(cEmpty,tEmpty);

       ws.scan(sv);
       if(ws.getHits(cEmpty) > 0u){
         ew[ws.getSiteNum(cEmpty)] = self.atomof;
       }
       return false;
    }else if(ws.getHits(cat) == 1u){
      //there is one other of our type visible. this is the desired amount, but make sure 
      //that both slots have the selected version.
      ew[ws.getSiteNum(cat)] = winatm;
    }else if(ws.getHits(cat) > 1u){
      //there are too many..
      if(isAMatch(ew[ws.getSiteNum(cat)])){
        Empty e;
        ew[ws.getSiteNum(cat)] = e.atomof;
      }
    }
    //if we're not the newest version, change ew[0] and return true
    if(winatm as QEnzyme){
      if(isAMatch(winatm.atomof)){
        ts.changeSelf(winatm.atomof);
        return true;
      }else{
        return false;
      }
    }
    return false;
  }

  @Override Void specialBehavior(TransitionSelf & ts){
    versionOrDensityChanges(ts);
    if(age.countAlarm()){
      if(!individualDeathBehavior(ts)){
        ts.die();
      }
    }
   specialEnzymeBehavior(ts);
  }
}