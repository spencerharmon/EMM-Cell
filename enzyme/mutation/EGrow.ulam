/**
Initial tree generation and point mutations occur through EGrow
process.
 */

element EGrow : QEnzyme {
  typedef QTree.TreeID TreeID;
  typedef QTree.GeneID GeneID;

  TreeID treeID;
  GeneID geneID;
  Bool isRoot;

  TreeID newtree(SiteNum slot){
    Atom & a = ew[slot];
    if(a as ERootInformation){
      for(TreeID t = 0; t <= TreeID.maxof; ++t){
        if(!a.treeIDInUse[t]){
          //maybe setting is useful?
	  //The tree doesn't really exist yet, and it won't if we fail,
	  // but at least this announces our intention to create one here.
          a.treeIDInUse[t] = true;
          return (TreeID) t;
        }
      }
    }
    return (TreeID) 0;
  }
  
  GeneID newgene(SiteNum slot){
    Atom & a = ew[slot];
    if(a as ETreeGeneInfo){
      if(a.treeID == treeID){
        for(GeneID g = 0; g <= GeneID.maxof; ++g){
          if(a.geneIDInUse[g]){
            //subsequent calls return next available.
            a.geneIDInUse[g] = true;
            return g;
          }
        }
      }
    }
    return (GeneID) 0;
  }
  SiteNum getRootInfo(){
    for(SiteNum i; i < ew.size(); ++i){
      Atom & a = ew[i];
      if(a as ERootInformation){
        return i;
      }
    }
    //last resort
    return (SiteNum) 0;
  }
  
  SiteNum getTreeGeneInfo(){
    for(SiteNum i; i < ew.size(); ++i){
      Atom & a = ew[i];
      if(a as ETreeGeneInfo){
        return i;
      }
    }
    //last resort
    return (SiteNum) 0;
  }

  @Override Void specialEnzymeBehavior(){

    //latter portion of enzyme lifespan to give time for detection of
    //in-use trees and genes.
    if(age.time == age.time.maxof-1){
      if(isRoot){
        Root ro;
	SiteNum rootInfoSlot = getRootInfo();
	if(rootInfoSlot != (SiteNum) 0){
          ew[0] = ro.createRandom(newtree(rootInfoSlot));
	}
      }else{
        TreeFactory tf;
	SiteNum rootInfoSlot = getRootInfo();
	SiteNum treeInfoSlot = getTreeGeneInfo();
	if(rootInfoSlot != (SiteNum) 0 && treeInfoSlot != (SiteNum) 0){
          ew[0] = tf.grow(treeID, geneID, newgene(treeInfoSlot), newgene(treeInfoSlot), newtree(rootInfoSlot));
	}
      }
    }
  }
}