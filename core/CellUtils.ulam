quark CellUtils {
  Random r;
  SiteUtils su;
  AtomUtils au;
  EventWindow ew;
  DebugUtils du;

  typedef EventWindow.SiteNum SiteNum;
  typedef AtomUtils.Type ElementType;
  typedef WindowScanner.Category Category;

  Bool initializing(){
    //look for EInit
    for(SiteNum i = 0; ew.isAccessible(i); ++i){
      Atom a = ew[i];
      if(a as EInit){
        return true;
      }
    }
    return false;
  }

  Bool copying(){
    //look for ECopy  
    for(SiteNum i = 0; ew.isAccessible(i); ++i){
      Atom a = ew[i];
      if(a as ECopy){
        return true;
      }
    }
    return false;
  }

  Bool putInEmpty(Atom a){
    Empty e;
    ElementType tEmpty = au.getValidType(e);
    SiteNum emptySlot = typeScan(tEmpty);
    if(emptySlot > 0){
      ew[emptySlot] = a;
      return true;
    }else return false;
  }
  SiteNum typeScan(ElementType t){
    SiteVisitorByType sv;
    WindowScanner ws;

    ws.resetCategories();
    Category cat = ws.allocateCategory();
    sv.setType(cat,t);

    ws.scan(sv);
    if(ws.getHits(cat) > 0u){
      return ws.getSiteNum(cat);
    }else{
      return 0u;
    }
  }
  Void tickleWatchdog(){
    for(SiteNum i = 1; ew.isAccessible(i); ++i){
      Atom & a = ew[i];
      if(a as InnerMembrane){
        a.watchdog.time = 0;
      }
    }
  }
}