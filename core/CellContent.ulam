/**
  Base class for all emm-cell components that belong inside the membrane.

 \radius 2
 \author Spencer Harmon
 \license lgpl
 */
quark CellContent : QContent{
  Random r;
  SiteUtils su;
  AtomUtils au;
  EventWindow ew;
  DebugUtils du;
  CellUtils cell;
  EMMConstants ec;
  
  typedef EventWindow.Symmetry Symmetry;
  typedef EventWindow.SiteNum SiteNum;
  typedef WindowScanner.Category Category;
  virtual Void specialBehavior(TransitionSelf & ts){
    return;
  }
  SiteNum swapWithSite(){
    WindowScanner ws;
    EMMClassSV sv;

    Category cQMembrane = ws.allocateCategory();
    Category cCellContent = ws.allocateCategory();
    Category cESymmetry = ws.allocateCategory();
    Category cEmpty = ws.allocateCategory();

    sv.setQMembrane(cQMembrane);
    sv.setCellContent(cCellContent);
    sv.setESymmetry(cESymmetry);
    sv.setEmpty(cEmpty);

    //symmetry flip-flop so ew.mapSym works as expected with ws.getCoord
    Symmetry origsym = ew.changeSymmetry((Symmetry) 0);
    ws.scan(sv);
    ew.changeSymmetry(origsym);

    if(ws.getHits(cESymmetry) > 0u){
      Atom a = ew[ws.getSiteNum(cESymmetry)];
      if(a as ESymmetry){
        ew.changeSymmetry(a.symmetry);
	Atom forward = ew[1];
	if(forward as Empty){
	  //Directional movement. We know our symmetry, and the forward direction is empty.

	  return (SiteNum) 1;
	}
      }
    }
    //Directional movement didn't occur. 
    if(ws.getHits(cQMembrane) == 0u){
      //Not on the surface.
      if(ws.getHits(cEmpty) > 0u){
        //Remove Bubbles.
        return ew.getSiteNumber(ew.mapSym(ws.getCoord(cEmpty)));
      }else if(ws.getHits(cCellContent) > 0u){
        //Churning
        return ew.getSiteNumber(ew.mapSym(ws.getCoord(cCellContent)));
      }
    }else{
      //on the surface
      if(ws.getHits(cCellContent) > 0u){
        //Churning
        return ew.getSiteNumber(ew.mapSym(ws.getCoord(cCellContent)));
      }
    }
    return (SiteNum) 0;
  }
  Bool nextToRes(){
    for(SiteNum i = 1; i <= 4; ++i){
      Atom a = ew[i];
      if (a as Res){
	return true;
      }
    }
    return false;
  }
  @Override Bool evaluateRuleSets(){
    TransitionSelf ts;
    ts.whoAmI(self.atomof);
    if (nextToRes()){
      ts.die();
    }
    
    SiteNum site = swapWithSite();
    if(site != (SiteNum) 0){
      ts.delaySwap(site);
    }
    specialBehavior(ts);
    ts.commit();
    
    return true;
  }
}
