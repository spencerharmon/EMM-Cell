/**
  TransitionSelf is meant to deal with changes to ew[0], establishing a priority system and dealing with swapping in cases where self is replaced with another atom. 
 */

transient TransitionSelf {
  typedef EventWindow.SiteNum SiteNum;
  Atom newSelf;
  Bool selfHasChanged = false;
  Bool swapping;
  SiteNum swapWith = 0;
  EventWindow ew;
  AtomUtils au;

  Void whoAmI(Atom me){
    newSelf = me;
  }
  Void changeSelf(Atom a){
    if(selfHasChanged && au.isEmpty(newSelf)){
      //priority to die()
      return;
    }
    newSelf = a;
    selfHasChanged = true;
  }
  Void die(){
    Empty e;
    newSelf = e;
    selfHasChanged = true;
  }    
  Void delaySwap(SiteNum site){
    swapWith = site;
    swapping = true;
  }
  Void commit(){
    if(!selfHasChanged){
      Atom a = ew[0];
      newSelf = a;
    }
    if(swapping){
      ew[0] = ew[swapWith];
      ew[swapWith] = newSelf;
    }else{
      ew[0] = newSelf;
    }
  }
}