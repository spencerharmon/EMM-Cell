/**
  Finds roots, genes of all types, or eresponses based on provided info. 
  Used by operator genes or treeref terminator genes. 
  \author Spencer Harmon;
  \license lgpl;
 */


transient GeneValueSV : SiteVisitor {
  AtomUtils au;

  typedef WindowScanner.Category Category;
  typedef EventWindow.SiteNum SiteNum;

  typedef QTree.TreeID TreeID;
  typedef QTree.GeneID GeneID;
  typedef AtomUtils.Type ElementType;
  typedef WindowScanner.Category Category;
  constant Unsigned cCATEGORY_COUNT = Category.maxof + 1;

  TreeID mTreeID[cCATEGORY_COUNT];
  GeneID mGeneID[cCATEGORY_COUNT];
  Bool mIsRoot[cCATEGORY_COUNT];
  Bool mIsEResponse[cCATEGORY_COUNT];
  Bool mIsTreeGene[cCATEGORY_COUNT];
  Bool mInUse[cCATEGORY_COUNT];
  Bool mIsTreeEResponse[cCATEGORY_COUNT];
  Bool mIsRootEResponse[cCATEGORY_COUNT];  

  Void reset() {
    for (Unsigned i = 0; i < cCATEGORY_COUNT; ++i){
      unsetCategory((Category) i);
    }
  }
  
  Void setGeneID(Category c, GeneID g) {
    mGeneID[c] = g;
    mInUse[c] = true;
  }

  Void setTreeID(Category c, TreeID tr) {
    mTreeID[c] = tr;
    mInUse[c] = true;
  }

  Void setIsRoot(Category c) {
    mIsRoot[c] = true;
    mIsEResponse[c] = false;
    mIsTreeGene[c] = false;
    mIsTreeEResponse[c] = false;
    mIsRootEResponse[c] = false;
    mInUse[c] = true;
  }

  Void setIsTreeGene(Category c){
    mIsTreeGene[c] = true;
    mIsTreeEResponse[c] = false;
    mIsRootEResponse[c] = false;
    mIsEResponse[c] = false;
    mIsRoot[c] = false;
    mInUse[c] = true;
  }

  Void setIsRootEResponse(Category c){
    mIsRootEResponse[c] = true;
    mIsTreeEResponse[c] = false;
    mIsTreeGene[c] = false;
    mIsRoot[c] = false;
    mInUse[c] = true;
  }

  Void setIsTreeEResponse(Category c){
    mIsTreeEResponse[c] = true;
    mIsRootEResponse[c] = false;
    mIsTreeGene[c] = false;
    mIsRoot[c] = false;
    mInUse[c] = true;
  }

  Void unsetCategory(Category c){
    mInUse[c] = false;
    mIsTreeEResponse[c] = false;
    mIsRootEResponse[c] = false;
    mIsTreeGene[c] = false;
    mIsRoot[c] = false;
    mTreeID[c] = (TreeID) 0;
    mGeneID[c] = (GeneID) 0;
  }

  virtual Void visit(WindowScanner& wsrv, Atom & a, SiteNum sn){
    for (Unsigned i = 0; i < cCATEGORY_COUNT; ++i){
      if (mInUse[i]){
        which(){
	  case mIsRoot[i]:
	  {
	    if(a as QRoot){
	      if(mTreeID[i] == a.getTreeID()){
		wsrv.categorize(sn, (Category) i);
	      }
	    }
	  }

	  case mIsTreeGene[i]:
	  {
	    if(a as QTree){
	      if(a as QRoot){
		//do nothing to avoid calling getGeneID() on a root QTree.
	      }else{
		if(mTreeID[i] == a.getTreeID() && mGeneID[i] == a.getGeneID()){
		  wsrv.categorize(sn, (Category) i);
		}
	      }
	    }
	  }

	  case mIsRootEResponse[i]:
	  {
	    if(a as EResponse){
	      if(mTreeID[i] == a.treeID){
		wsrv.categorize(sn, (Category) i);
	      }
	    }
	  }

	  case mIsTreeEResponse[i]:
	  {
	    if(a as EResponse){
	      if(mTreeID[i] == a.treeID && mGeneID[i] == a.geneID){
		wsrv.categorize(sn, (Category) i);
	      }
	    }
	  }
	}
      }
    }
  }
}
