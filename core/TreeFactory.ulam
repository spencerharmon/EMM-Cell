/**
  TreeFactory is a top-level, concrete class that handles the creation of random
  tree genes, especially as it relates to the Grow method.
  This is a central place for parameters and attributes about genes and their growth.
 */

quark TreeFactory{
  typedef EMMTypes.OperatorType OperatorType;
  typedef EMMTypes.TreeID TreeID;
  typedef EMMTypes.GeneID GeneID;
  typedef EMMTypes.ID ID;
  typedef EMMTypes.StoredValue StoredValue;

  Random r;

  constant Unsigned growOdds = 10u;

  Atom createRandomTerminator(TreeID t, GeneID g, TreeID new){
    //we have to keep track of the terminator types here.
    Unsigned terminatorTypes = 2; //zero-base?
    Unsigned roll = r.create(terminatorTypes);
    which(roll){
      case(0u):
      {
        Value v;
        v.treeID = t;
        v.geneID = g;
        v.value = (StoredValue) r.create(StoredValue.maxof);
        return v.atomof;
      }
      case(1u):
      {
        ComIn c;
        c.treeID = t;
        c.geneID = g;
        return c.atomof;
      }
      case(2u):
      {
        VarRef v;
        v.treeID = t;
        v.geneID = g;
        v.refID = new;
        return v.atomof;
      }
    }
  }

  Atom createRandomOperator(TreeID t, GeneID g, GeneID t0, GeneID t1){
    OperatorGene og;
    og.treeID = t;
    og.geneID = g;
    og.tree0 = t0;
    og.tree1 = t1;
    OperatorType max = OperatorType.maxof;
    og.op = (OperatorType) r.create(max);
    return og.atomof;
  }

  Atom createRandomRoot(TreeID t){
    Root ro;
    ro.treeID = t;
    //  is this safe to assume, or should the calling class
    // provive IDs based on ERootInformation process?
    ro.tree0 = (GeneID) 0;
    ro.tree1 = (GeneID) 1;
    ro.op = (OperatorType) r.create(OperatorType.maxof);
    return ro.atomof;
  }

  Atom createRandomID(){
    Identifier i;
    i.id = (ID) r.create(ID.maxof);
    return i.atomof;
  }
}