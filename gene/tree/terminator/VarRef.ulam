element VarRef : QTerminator {
  typedef QTree.TreeID TreeID;
  typedef QTree.GeneID GeneID;
  typedef QTree.StoredValue StoredValue;
  TreeID treeID;
  GeneID geneID;
  StoredValue value;

  TreeID refID;

  @Override Atom terminatorCreate(TreeID t, GeneID g, TreeID new){
    VarRef v;
    v.treeID = t;
    v.geneID = g;
    v.refID = new;
    return v.atomof;
  }

  @Override StoredValue getStoredValue(){
    return value;
  }
  @Override TreeID getTreeID(){
    return treeID;
  }
  @Override GeneID getGeneID(){
    return geneID;
  }
  @Override Atom getPhaseOneIntermediate(){
    VarRefCopy vc;
    vc.treeID = treeID;
    vc.geneID = geneID;
    vc.refID = refID;
    return vc.atomof;
  }
  Atom getRootGene(TreeID treeID){
    WindowScanner ws;
    GeneValueSV sv;
    Category cRoot = ws.allocateCategory();
    Category cEResponse = ws.allocateCategory();
    sv.setTreeID(cRoot, treeID);
    sv.setTreeID(cEResponse, treeID);
    sv.setIsRoot(cRoot);
    sv.setIsRootEResponse(cEResponse);
    ws.scan(sv);
    if(ws.getHits(cRoot) > 0u){
      Atom a = ew[ws.getSiteNum(cRoot)];
      if(a as Root){
        return a;
      }
    }else if(ws.getHits(cEResponse) > 0u){
      Atom a = ew[ws.getSiteNum(cEResponse)];
      if(a as EResponse){
         return a;
      }
    }
    QTree qt;
    if(r.oneIn(qt.growOdds)){
      requestRoot(treeID);
    }
    Empty e;
    return e.atomof;
  }
  Void requestRoot(TreeID treeID){
    ERequest er;
    er.treeID = treeID;
    er.isRoot = true;
    putInEmpty(er.atomof);
  }

  @Override Void specialTerminatorBehavior(){
    Atom a = self.getRootGene(treeID);
    if(a as QRoot){
      if(a.getTreeID() == refID){
        value = a.getStoredValue();
      }
    }
  }
}

